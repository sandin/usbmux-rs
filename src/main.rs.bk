extern crate bincode;
extern crate plist;
extern crate serde;

mod protocol;

use std::io;
use std::result;
use std::io::prelude::*;
use std::net::{Shutdown, TcpStream};

use std::io::Cursor;
use std::io::{BufWriter, BufReader, Write};
use std::mem;
use std::path::Path;
use std::vec::Vec;

use serde::de;

use plist::dictionary::Dictionary;
use plist::Integer;
use plist::Value;

use protocol::{UsbmuxdHeader, UsbmuxdMsgType, UsbmuxdDeviceList, USBMUXD_SOCKET_NAME, USBMUXD_PROTOCOL_VERSION};

const PLIST_LIBUSBMUX_VERSION: u64 = 3;

fn value_to_xml_data(value: &Value) -> Vec<u8> {
    let mut buf = Cursor::new(Vec::new());
    value.to_writer_xml(&mut buf).unwrap();
    buf.into_inner()
}

fn value_to_binary_data(value: &Value) -> Vec<u8> {
    let mut buf = Cursor::new(Vec::new());
    value.to_writer_binary(&mut buf).unwrap();
    buf.into_inner()
}

fn plist_to_object<T : de::DeserializeOwned>(data: &Vec<u8>) -> T {
    let mut buf = Cursor::new(data.as_slice());
    plist::from_reader(&mut buf).unwrap()
}

fn create_list_devices_msg() -> Value {
    let client_name: String = env!("CARGO_PKG_NAME").to_owned();
    let client_version: String = env!("CARGO_PKG_VERSION").to_owned();

    let mut dict = Dictionary::new();
    dict.insert(
        "MessageType".to_owned(),
        Value::String("ListDevices".to_owned()),
    );
    dict.insert(
        "ClientVersionString".to_owned(),
        Value::String(client_version),
    );
    dict.insert("ProgName".to_owned(), Value::String(client_name));
    dict.insert(
        "kLibUSBMuxVersion".to_owned(),
        Value::Integer(Integer::from(PLIST_LIBUSBMUX_VERSION)),
    );

    Value::Dictionary(dict)
}


fn main() {
    println!("Hello, world!");

    let book = Value::from_file(
        "E:\\project\\cpp\\perfcat_build_scripts\\libplist\\test\\data\\dictref1byte.bplist",
    )
    .expect("failed to read plist");
    println!("{:?}", book);

    let value = create_list_devices_msg();
    let data: Vec<u8> = value_to_xml_data(&value);
    let xml = String::from_utf8(data).unwrap();
    println!("xml={}", xml);
}


#[cfg(test)]
mod tests {
    use super::*;

    pub fn to_hex_string(bytes: &Vec<u8>) -> String {
        let strs: Vec<String> = bytes.iter().map(|b| format!("{:02X}", b)).collect();
        strs.connect(" ")
    }

    #[test]
    fn test_socket() -> Result<(), Box<dyn std::error::Error>> {
        assert_eq!(1, 1);
        let mut stream = TcpStream::connect(USBMUXD_SOCKET_NAME)?;

        let value = create_list_devices_msg();
        let data: Vec<u8> = value_to_binary_data(&value);

        let header_length: usize = mem::size_of::<UsbmuxdHeader>();
        let length: usize = header_length + data.len(); 

        let header = UsbmuxdHeader {
            length: length as u32,
            version: USBMUXD_PROTOCOL_VERSION,
            message: UsbmuxdMsgType::Plist as u32,
            tag: 1, // TODO
        };
        println!("request header: {:?}", header);

        let header: Vec<u8> = bincode::serialize(&header).unwrap();
        //println!("encoded: {:?} {:?}", to_hex_string(&header), header);

        stream.write_all(&header)?;
        stream.write_all(&data)?;

        let mut buffer = vec![0u8; header_length];
        stream.read_exact(&mut buffer)?;

        let header: UsbmuxdHeader = bincode::deserialize(&buffer[..])?;
        println!("response header: {:?}", header);

        let length: usize = header.length as usize - header_length;
        buffer = vec![0u8; length];
        stream.read_exact(&mut buffer)?;

        if header.message == UsbmuxdMsgType::Plist as u32 {
            let payload: UsbmuxdDeviceList = plist_to_object(&buffer);
            println!("response payload: {:?}", payload);
        }

        stream.shutdown(Shutdown::Both);
        Ok(())
    }
}
